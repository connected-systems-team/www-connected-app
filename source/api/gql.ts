/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "mutation AccountAuthenticationRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountAuthenticationRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery AccountAuthentication {\n  accountAuthentication {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountAuthenticationEmailVerification {\n  accountAuthenticationEmailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationSend {\n  accountAuthenticationEmailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationVerify($input: AccountEmailVerificationVerifyInput!) {\n  accountAuthenticationEmailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountAuthenticationPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountMaintenanceSessionCreate {\n  accountMaintenanceSessionCreate {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nmutation AccountAuthenticationRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountAuthenticationRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountAuthenticationSignInComplete {\n  accountAuthenticationSignInComplete {\n    success\n  }\n}\n\nmutation AccountPasswordUpdate($input: AccountPasswordUpdateInput!) {\n  accountPasswordUpdate(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery Account {\n  account {\n    emailAddress\n    profile {\n      id\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountPrivileged($input: AccountInput!) {\n  accountPrivileged(input: $input) {\n    emailAddress\n    profiles {\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountsPrivileged($pagination: PaginationInput!) {\n  accountsPrivileged(pagination: $pagination) {\n    items {\n      emailAddress\n      profiles {\n        username\n        displayName\n        givenName\n        familyName\n        countryCode\n        images {\n          url\n          variant\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nquery AccountEnrolledChallenges {\n  account {\n    enrolledChallenges\n  }\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    username\n    displayName\n    givenName\n    familyName\n    images {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountProfilePublic($username: String!) {\n  accountProfilePublic(username: $username) {\n    username\n    displayName\n    images {\n      url\n      variant\n    }\n    createdAt\n  }\n}\n\nquery AccountAvailableAccessRolesPrivileged {\n  accountAvailableAccessRolesPrivileged\n}\n\nquery AccountAssignedAccessRolesPrivileged($statuses: [AccessRoleStatus!], $pagination: PaginationInput!) {\n  accountAssignedAccessRolesPrivileged(\n    statuses: $statuses\n    pagination: $pagination\n  ) {\n    items {\n      id\n      type\n      status\n      emailAddress\n      profile {\n        username\n        displayName\n        images {\n          url\n          variant\n        }\n        createdAt\n      }\n      expiresAt\n      createdAt\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nmutation AccountAccessRoleRevokePrivileged($input: AccountAccessRoleRevokeInput!) {\n  accountAccessRoleRevokePrivileged(input: $input) {\n    success\n  }\n}\n\nmutation AccountAccessRoleGrantPrivileged($input: AccountAccessRoleGrantInput!) {\n  accountAccessRoleGrantPrivileged(input: $input) {\n    id\n    type\n    status\n    profile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n      createdAt\n    }\n    expiresAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AccountDelete($reason: String) {\n  accountDelete(reason: $reason) {\n    success\n  }\n}\n\nmutation AccountDeletePrivileged($input: AccountDeleteInput!) {\n  accountDeletePrivileged(input: $input) {\n    success\n  }\n}": types.AccountAuthenticationRegistrationOrSignInCreateDocument,
    "mutation CommerceCheckoutSessionCreateDirect($input: CommerceCheckoutSessionCreateDirectInput!) {\n  commerceCheckoutSessionCreateDirect(input: $input) {\n    id\n    externalMetadata\n    createdAt\n  }\n}\n\nquery CommerceOrdersByCheckoutSession($checkoutSessionId: String!) {\n  commerceOrdersByCheckoutSession(checkoutSessionId: $checkoutSessionId) {\n    ... on CommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrders($pagination: PaginationInput!) {\n  commerceOrders(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        amount\n      }\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nquery CommerceOrder($orderIdentifier: String!, $emailAddress: String) {\n  commerceOrder(identifier: $orderIdentifier, emailAddress: $emailAddress) {\n    ... on CommerceOrder {\n      identifier\n      status\n      statusRecords {\n        status\n        timestamp\n        description\n      }\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        indexId\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shipments {\n        id\n        orderIndexId\n        status\n        label {\n          carrier\n          serviceType\n          trackingNumber\n          trackingUrl\n        }\n        packageInfo {\n          items {\n            indexId\n            quantity\n          }\n        }\n        shippedAt\n        deliveredAt\n        cancelledAt\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrdersPrivileged($pagination: PaginationInput!) {\n  commerceOrdersPrivileged(pagination: $pagination) {\n    items {\n      batchIdentifier\n      beneficiaryEmailAddress\n      createdAt\n      emailAddress\n      fulfillmentSource\n      fulfillmentStatus\n      holdOnShipping\n      id\n      identifier\n      lineItems {\n        commerceOrderId\n        createdAt\n        id\n        indexId\n        productVariantId\n        quantity\n        status\n        updatedAt\n      }\n      metadata\n      orderLogs {\n        commerceOrderId\n        content\n        id\n        description\n        createdAt\n        source\n        visibility\n      }\n      payment {\n        amount\n        authorizedAt\n        cancelledAt\n        capturedAt\n        confirmedAt\n        createdAt\n        currencyCode\n        externalReferenceId\n        id\n        paymentMethod {\n          externalResourceId\n          paymentProcessorType\n          type\n          ... on PaymentMethodCreditCard {\n            externalResourceId\n            billingAddress {\n              city\n              company\n              country\n              firstName\n              lastName\n              line1\n              line2\n              postalCode\n              state\n              phoneNumber\n            }\n            cardType\n            expirationMonth\n            expirationYear\n            last4\n            paymentProcessorType\n            type\n          }\n          ... on PaymentMethodAppleInAppPurchase {\n            externalResourceId\n            paymentProcessorType\n            type\n          }\n        }\n        paymentProcessorType\n        status\n        updatedAt\n        walletEntryId\n      }\n      paymentId\n      paymentStatus\n      priceInfo {\n        amount\n        currencyCode\n        lineItemPrices {\n          amount\n          indexId\n          originalSubtotal\n          subtotal\n          tax\n        }\n        originalSubtotal\n        shippingRate {\n          amount\n          breakdown {\n            freeShipping\n            items {\n              indexId\n              quantity\n            }\n            originalShippingRate\n            packageIndexId\n            shippingRate\n          }\n          originalAmount\n        }\n        subtotal\n        tax {\n          shipping\n          total\n        }\n      }\n      shipments {\n        cancelledAt\n        createdAt\n        createdByAccountId\n        createdByProfileId\n        deliveredAt\n        deliveryStatus\n        id\n        orderIndexId\n        label {\n          carrier\n          labelId\n          serviceType\n          source\n          trackingNumber\n          trackingUrl\n        }\n        orderSlip {\n          storedObjectUrl\n        }\n        shippedAt\n        source\n        status\n        toAddress {\n          city\n          company\n          country\n          firstName\n          lastName\n          line1\n          line2\n          phoneNumber\n          state\n          postalCode\n        }\n        updatedAt\n        updatedByAccountId\n        updatedByProfileId\n      }\n      shippingInfo {\n        shippingAddress {\n          city\n          country\n          company\n          lastName\n          firstName\n          line1\n          line2\n          phoneNumber\n          postalCode\n          state\n        }\n      }\n      source\n      status\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}": types.CommerceCheckoutSessionCreateDirectDocument,
    "query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id) {\n    success\n  }\n}": types.ContactsDocument,
    "query DataInteractionDatabases($pagination: PaginationInput!) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput!) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput!, $filters: ColumnFilterGroupInput) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}": types.DataInteractionDatabasesDocument,
    "query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}": types.EmailCampaignsDocument,
    "mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input) {\n    success\n  }\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input) {\n    success\n  }\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}": types.EngagementEventCreateDocument,
    "query Posts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInput!) {\n  postsMine(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      images {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreatePrivileged(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type) {\n    success\n  }\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId) {\n    success\n  }\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content) {\n    success\n  }\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content) {\n    success\n  }\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput!) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id) {\n    success\n  }\n}": types.PostsDocument,
    "query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput!) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsPrivileged($pagination: PaginationInput!) {\n  supportTicketsPrivileged(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      assignedToProfileId\n      assignedToProfile {\n        username\n        displayName\n        images {\n          type\n          url\n          variant\n        }\n      }\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketAssign($ticketId: String!, $username: String) {\n  supportTicketAssign(ticketId: $ticketId, username: $username) {\n    id\n    assignedToProfileId\n    assignedToProfile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n    }\n  }\n}\n\nmutation SupportTicketCommentCreatePrivileged($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreatePrivileged(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}\n\nquery SupportAllSupportProfiles {\n  supportAllSupportProfiles {\n    username\n    displayName\n    images {\n      type\n      url\n      variant\n    }\n  }\n}": types.SupportPostDocument,
    "query WaitLists($pagination: PaginationInput!) {\n  waitLists(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $pagination: PaginationInput!) {\n  waitListEntries(\n    waitListIdentifier: $waitListIdentifier\n    pagination: $pagination\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}": types.WaitListsDocument,
    "mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}\n\nquery TaskHistory($pagination: PaginationInput!) {\n  taskHistory(pagination: $pagination) {\n    items {\n      id\n      state\n      procedureType\n      procedureArguments\n      results {\n        result\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}": types.TaskCreatePortScanDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AccountAuthenticationRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountAuthenticationRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery AccountAuthentication {\n  accountAuthentication {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountAuthenticationEmailVerification {\n  accountAuthenticationEmailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationSend {\n  accountAuthenticationEmailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationVerify($input: AccountEmailVerificationVerifyInput!) {\n  accountAuthenticationEmailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountAuthenticationPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountMaintenanceSessionCreate {\n  accountMaintenanceSessionCreate {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nmutation AccountAuthenticationRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountAuthenticationRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountAuthenticationSignInComplete {\n  accountAuthenticationSignInComplete {\n    success\n  }\n}\n\nmutation AccountPasswordUpdate($input: AccountPasswordUpdateInput!) {\n  accountPasswordUpdate(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery Account {\n  account {\n    emailAddress\n    profile {\n      id\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountPrivileged($input: AccountInput!) {\n  accountPrivileged(input: $input) {\n    emailAddress\n    profiles {\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountsPrivileged($pagination: PaginationInput!) {\n  accountsPrivileged(pagination: $pagination) {\n    items {\n      emailAddress\n      profiles {\n        username\n        displayName\n        givenName\n        familyName\n        countryCode\n        images {\n          url\n          variant\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nquery AccountEnrolledChallenges {\n  account {\n    enrolledChallenges\n  }\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    username\n    displayName\n    givenName\n    familyName\n    images {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountProfilePublic($username: String!) {\n  accountProfilePublic(username: $username) {\n    username\n    displayName\n    images {\n      url\n      variant\n    }\n    createdAt\n  }\n}\n\nquery AccountAvailableAccessRolesPrivileged {\n  accountAvailableAccessRolesPrivileged\n}\n\nquery AccountAssignedAccessRolesPrivileged($statuses: [AccessRoleStatus!], $pagination: PaginationInput!) {\n  accountAssignedAccessRolesPrivileged(\n    statuses: $statuses\n    pagination: $pagination\n  ) {\n    items {\n      id\n      type\n      status\n      emailAddress\n      profile {\n        username\n        displayName\n        images {\n          url\n          variant\n        }\n        createdAt\n      }\n      expiresAt\n      createdAt\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nmutation AccountAccessRoleRevokePrivileged($input: AccountAccessRoleRevokeInput!) {\n  accountAccessRoleRevokePrivileged(input: $input) {\n    success\n  }\n}\n\nmutation AccountAccessRoleGrantPrivileged($input: AccountAccessRoleGrantInput!) {\n  accountAccessRoleGrantPrivileged(input: $input) {\n    id\n    type\n    status\n    profile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n      createdAt\n    }\n    expiresAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AccountDelete($reason: String) {\n  accountDelete(reason: $reason) {\n    success\n  }\n}\n\nmutation AccountDeletePrivileged($input: AccountDeleteInput!) {\n  accountDeletePrivileged(input: $input) {\n    success\n  }\n}"): (typeof documents)["mutation AccountAuthenticationRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountAuthenticationRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery AccountAuthentication {\n  accountAuthentication {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountAuthenticationEmailVerification {\n  accountAuthenticationEmailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationSend {\n  accountAuthenticationEmailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationEmailVerificationVerify($input: AccountEmailVerificationVerifyInput!) {\n  accountAuthenticationEmailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountAuthenticationPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountAuthenticationPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountMaintenanceSessionCreate {\n  accountMaintenanceSessionCreate {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nmutation AccountAuthenticationRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountAuthenticationRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountAuthenticationSignInComplete {\n  accountAuthenticationSignInComplete {\n    success\n  }\n}\n\nmutation AccountPasswordUpdate($input: AccountPasswordUpdateInput!) {\n  accountPasswordUpdate(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery Account {\n  account {\n    emailAddress\n    profile {\n      id\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountPrivileged($input: AccountInput!) {\n  accountPrivileged(input: $input) {\n    emailAddress\n    profiles {\n      username\n      displayName\n      givenName\n      familyName\n      images {\n        url\n        variant\n      }\n      updatedAt\n      createdAt\n    }\n    accessRoles\n    createdAt\n  }\n}\n\nquery AccountsPrivileged($pagination: PaginationInput!) {\n  accountsPrivileged(pagination: $pagination) {\n    items {\n      emailAddress\n      profiles {\n        username\n        displayName\n        givenName\n        familyName\n        countryCode\n        images {\n          url\n          variant\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nquery AccountEnrolledChallenges {\n  account {\n    enrolledChallenges\n  }\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    username\n    displayName\n    givenName\n    familyName\n    images {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery AccountProfilePublic($username: String!) {\n  accountProfilePublic(username: $username) {\n    username\n    displayName\n    images {\n      url\n      variant\n    }\n    createdAt\n  }\n}\n\nquery AccountAvailableAccessRolesPrivileged {\n  accountAvailableAccessRolesPrivileged\n}\n\nquery AccountAssignedAccessRolesPrivileged($statuses: [AccessRoleStatus!], $pagination: PaginationInput!) {\n  accountAssignedAccessRolesPrivileged(\n    statuses: $statuses\n    pagination: $pagination\n  ) {\n    items {\n      id\n      type\n      status\n      emailAddress\n      profile {\n        username\n        displayName\n        images {\n          url\n          variant\n        }\n        createdAt\n      }\n      expiresAt\n      createdAt\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}\n\nmutation AccountAccessRoleRevokePrivileged($input: AccountAccessRoleRevokeInput!) {\n  accountAccessRoleRevokePrivileged(input: $input) {\n    success\n  }\n}\n\nmutation AccountAccessRoleGrantPrivileged($input: AccountAccessRoleGrantInput!) {\n  accountAccessRoleGrantPrivileged(input: $input) {\n    id\n    type\n    status\n    profile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n      createdAt\n    }\n    expiresAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation AccountDelete($reason: String) {\n  accountDelete(reason: $reason) {\n    success\n  }\n}\n\nmutation AccountDeletePrivileged($input: AccountDeleteInput!) {\n  accountDeletePrivileged(input: $input) {\n    success\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CommerceCheckoutSessionCreateDirect($input: CommerceCheckoutSessionCreateDirectInput!) {\n  commerceCheckoutSessionCreateDirect(input: $input) {\n    id\n    externalMetadata\n    createdAt\n  }\n}\n\nquery CommerceOrdersByCheckoutSession($checkoutSessionId: String!) {\n  commerceOrdersByCheckoutSession(checkoutSessionId: $checkoutSessionId) {\n    ... on CommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrders($pagination: PaginationInput!) {\n  commerceOrders(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        amount\n      }\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nquery CommerceOrder($orderIdentifier: String!, $emailAddress: String) {\n  commerceOrder(identifier: $orderIdentifier, emailAddress: $emailAddress) {\n    ... on CommerceOrder {\n      identifier\n      status\n      statusRecords {\n        status\n        timestamp\n        description\n      }\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        indexId\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shipments {\n        id\n        orderIndexId\n        status\n        label {\n          carrier\n          serviceType\n          trackingNumber\n          trackingUrl\n        }\n        packageInfo {\n          items {\n            indexId\n            quantity\n          }\n        }\n        shippedAt\n        deliveredAt\n        cancelledAt\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrdersPrivileged($pagination: PaginationInput!) {\n  commerceOrdersPrivileged(pagination: $pagination) {\n    items {\n      batchIdentifier\n      beneficiaryEmailAddress\n      createdAt\n      emailAddress\n      fulfillmentSource\n      fulfillmentStatus\n      holdOnShipping\n      id\n      identifier\n      lineItems {\n        commerceOrderId\n        createdAt\n        id\n        indexId\n        productVariantId\n        quantity\n        status\n        updatedAt\n      }\n      metadata\n      orderLogs {\n        commerceOrderId\n        content\n        id\n        description\n        createdAt\n        source\n        visibility\n      }\n      payment {\n        amount\n        authorizedAt\n        cancelledAt\n        capturedAt\n        confirmedAt\n        createdAt\n        currencyCode\n        externalReferenceId\n        id\n        paymentMethod {\n          externalResourceId\n          paymentProcessorType\n          type\n          ... on PaymentMethodCreditCard {\n            externalResourceId\n            billingAddress {\n              city\n              company\n              country\n              firstName\n              lastName\n              line1\n              line2\n              postalCode\n              state\n              phoneNumber\n            }\n            cardType\n            expirationMonth\n            expirationYear\n            last4\n            paymentProcessorType\n            type\n          }\n          ... on PaymentMethodAppleInAppPurchase {\n            externalResourceId\n            paymentProcessorType\n            type\n          }\n        }\n        paymentProcessorType\n        status\n        updatedAt\n        walletEntryId\n      }\n      paymentId\n      paymentStatus\n      priceInfo {\n        amount\n        currencyCode\n        lineItemPrices {\n          amount\n          indexId\n          originalSubtotal\n          subtotal\n          tax\n        }\n        originalSubtotal\n        shippingRate {\n          amount\n          breakdown {\n            freeShipping\n            items {\n              indexId\n              quantity\n            }\n            originalShippingRate\n            packageIndexId\n            shippingRate\n          }\n          originalAmount\n        }\n        subtotal\n        tax {\n          shipping\n          total\n        }\n      }\n      shipments {\n        cancelledAt\n        createdAt\n        createdByAccountId\n        createdByProfileId\n        deliveredAt\n        deliveryStatus\n        id\n        orderIndexId\n        label {\n          carrier\n          labelId\n          serviceType\n          source\n          trackingNumber\n          trackingUrl\n        }\n        orderSlip {\n          storedObjectUrl\n        }\n        shippedAt\n        source\n        status\n        toAddress {\n          city\n          company\n          country\n          firstName\n          lastName\n          line1\n          line2\n          phoneNumber\n          state\n          postalCode\n        }\n        updatedAt\n        updatedByAccountId\n        updatedByProfileId\n      }\n      shippingInfo {\n        shippingAddress {\n          city\n          country\n          company\n          lastName\n          firstName\n          line1\n          line2\n          phoneNumber\n          postalCode\n          state\n        }\n      }\n      source\n      status\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}"): (typeof documents)["mutation CommerceCheckoutSessionCreateDirect($input: CommerceCheckoutSessionCreateDirectInput!) {\n  commerceCheckoutSessionCreateDirect(input: $input) {\n    id\n    externalMetadata\n    createdAt\n  }\n}\n\nquery CommerceOrdersByCheckoutSession($checkoutSessionId: String!) {\n  commerceOrdersByCheckoutSession(checkoutSessionId: $checkoutSessionId) {\n    ... on CommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrders($pagination: PaginationInput!) {\n  commerceOrders(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        amount\n      }\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nquery CommerceOrder($orderIdentifier: String!, $emailAddress: String) {\n  commerceOrder(identifier: $orderIdentifier, emailAddress: $emailAddress) {\n    ... on CommerceOrder {\n      identifier\n      status\n      statusRecords {\n        status\n        timestamp\n        description\n      }\n      paymentStatus\n      fulfillmentStatus\n      emailAddress\n      lineItems {\n        id\n        indexId\n        status\n        productVariantId\n        quantity\n        updatedAt\n        createdAt\n      }\n      shipments {\n        id\n        orderIndexId\n        status\n        label {\n          carrier\n          serviceType\n          trackingNumber\n          trackingUrl\n        }\n        packageInfo {\n          items {\n            indexId\n            quantity\n          }\n        }\n        shippedAt\n        deliveredAt\n        cancelledAt\n        updatedAt\n        createdAt\n      }\n      shippingInfo {\n        shippingAddress {\n          firstName\n          lastName\n          company\n          phoneNumber\n          line1\n          line2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      payment {\n        paymentMethod {\n          ... on PaymentMethodCreditCard {\n            billingAddress {\n              firstName\n              lastName\n              company\n              phoneNumber\n              line1\n              line2\n              city\n              state\n              postalCode\n              country\n            }\n            type\n            last4\n            cardType\n          }\n        }\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n    ... on PublicCommerceOrder {\n      identifier\n      status\n      paymentStatus\n      fulfillmentStatus\n      lineItems {\n        id\n        status\n        productVariantId\n        quantity\n      }\n      priceInfo {\n        currencyCode\n        originalSubtotal\n        shippingRate {\n          originalAmount\n          amount\n        }\n        tax {\n          shipping\n          total\n        }\n        subtotal\n        amount\n      }\n      createdAt\n    }\n  }\n}\n\nquery CommerceOrdersPrivileged($pagination: PaginationInput!) {\n  commerceOrdersPrivileged(pagination: $pagination) {\n    items {\n      batchIdentifier\n      beneficiaryEmailAddress\n      createdAt\n      emailAddress\n      fulfillmentSource\n      fulfillmentStatus\n      holdOnShipping\n      id\n      identifier\n      lineItems {\n        commerceOrderId\n        createdAt\n        id\n        indexId\n        productVariantId\n        quantity\n        status\n        updatedAt\n      }\n      metadata\n      orderLogs {\n        commerceOrderId\n        content\n        id\n        description\n        createdAt\n        source\n        visibility\n      }\n      payment {\n        amount\n        authorizedAt\n        cancelledAt\n        capturedAt\n        confirmedAt\n        createdAt\n        currencyCode\n        externalReferenceId\n        id\n        paymentMethod {\n          externalResourceId\n          paymentProcessorType\n          type\n          ... on PaymentMethodCreditCard {\n            externalResourceId\n            billingAddress {\n              city\n              company\n              country\n              firstName\n              lastName\n              line1\n              line2\n              postalCode\n              state\n              phoneNumber\n            }\n            cardType\n            expirationMonth\n            expirationYear\n            last4\n            paymentProcessorType\n            type\n          }\n          ... on PaymentMethodAppleInAppPurchase {\n            externalResourceId\n            paymentProcessorType\n            type\n          }\n        }\n        paymentProcessorType\n        status\n        updatedAt\n        walletEntryId\n      }\n      paymentId\n      paymentStatus\n      priceInfo {\n        amount\n        currencyCode\n        lineItemPrices {\n          amount\n          indexId\n          originalSubtotal\n          subtotal\n          tax\n        }\n        originalSubtotal\n        shippingRate {\n          amount\n          breakdown {\n            freeShipping\n            items {\n              indexId\n              quantity\n            }\n            originalShippingRate\n            packageIndexId\n            shippingRate\n          }\n          originalAmount\n        }\n        subtotal\n        tax {\n          shipping\n          total\n        }\n      }\n      shipments {\n        cancelledAt\n        createdAt\n        createdByAccountId\n        createdByProfileId\n        deliveredAt\n        deliveryStatus\n        id\n        orderIndexId\n        label {\n          carrier\n          labelId\n          serviceType\n          source\n          trackingNumber\n          trackingUrl\n        }\n        orderSlip {\n          storedObjectUrl\n        }\n        shippedAt\n        source\n        status\n        toAddress {\n          city\n          company\n          country\n          firstName\n          lastName\n          line1\n          line2\n          phoneNumber\n          state\n          postalCode\n        }\n        updatedAt\n        updatedByAccountId\n        updatedByProfileId\n      }\n      shippingInfo {\n        shippingAddress {\n          city\n          country\n          company\n          lastName\n          firstName\n          line1\n          line2\n          phoneNumber\n          postalCode\n          state\n        }\n      }\n      source\n      status\n      updatedAt\n    }\n    pagination {\n      itemsTotal\n      itemsPerPage\n      page\n      pagesTotal\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id) {\n    success\n  }\n}"): (typeof documents)["query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id) {\n    success\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DataInteractionDatabases($pagination: PaginationInput!) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput!) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput!, $filters: ColumnFilterGroupInput) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"): (typeof documents)["query DataInteractionDatabases($pagination: PaginationInput!) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput!) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput!, $filters: ColumnFilterGroupInput) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}"): (typeof documents)["query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input) {\n    success\n  }\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input) {\n    success\n  }\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}"): (typeof documents)["mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input) {\n    success\n  }\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input) {\n    success\n  }\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Posts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInput!) {\n  postsMine(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      images {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreatePrivileged(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type) {\n    success\n  }\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId) {\n    success\n  }\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content) {\n    success\n  }\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content) {\n    success\n  }\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput!) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id) {\n    success\n  }\n}"): (typeof documents)["query Posts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInput!) {\n  postsMine(pagination: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        images {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      images {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreatePrivileged(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type) {\n    success\n  }\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId) {\n    success\n  }\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content) {\n    success\n  }\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content) {\n    success\n  }\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput!) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id) {\n    success\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput!) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsPrivileged($pagination: PaginationInput!) {\n  supportTicketsPrivileged(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      assignedToProfileId\n      assignedToProfile {\n        username\n        displayName\n        images {\n          type\n          url\n          variant\n        }\n      }\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketAssign($ticketId: String!, $username: String) {\n  supportTicketAssign(ticketId: $ticketId, username: $username) {\n    id\n    assignedToProfileId\n    assignedToProfile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n    }\n  }\n}\n\nmutation SupportTicketCommentCreatePrivileged($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreatePrivileged(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}\n\nquery SupportAllSupportProfiles {\n  supportAllSupportProfiles {\n    username\n    displayName\n    images {\n      type\n      url\n      variant\n    }\n  }\n}"): (typeof documents)["query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($pagination: PaginationInput!) {\n  posts(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput!) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsPrivileged($pagination: PaginationInput!) {\n  supportTicketsPrivileged(pagination: $pagination) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      assignedToProfileId\n      assignedToProfile {\n        username\n        displayName\n        images {\n          type\n          url\n          variant\n        }\n      }\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketAssign($ticketId: String!, $username: String) {\n  supportTicketAssign(ticketId: $ticketId, username: $username) {\n    id\n    assignedToProfileId\n    assignedToProfile {\n      username\n      displayName\n      images {\n        type\n        url\n        variant\n      }\n    }\n  }\n}\n\nmutation SupportTicketCommentCreatePrivileged($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreatePrivileged(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}\n\nquery SupportAllSupportProfiles {\n  supportAllSupportProfiles {\n    username\n    displayName\n    images {\n      type\n      url\n      variant\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query WaitLists($pagination: PaginationInput!) {\n  waitLists(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $pagination: PaginationInput!) {\n  waitListEntries(\n    waitListIdentifier: $waitListIdentifier\n    pagination: $pagination\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}"): (typeof documents)["query WaitLists($pagination: PaginationInput!) {\n  waitLists(pagination: $pagination) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $pagination: PaginationInput!) {\n  waitListEntries(\n    waitListIdentifier: $waitListIdentifier\n    pagination: $pagination\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}\n\nquery TaskHistory($pagination: PaginationInput!) {\n  taskHistory(pagination: $pagination) {\n    items {\n      id\n      state\n      procedureType\n      procedureArguments\n      results {\n        result\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"): (typeof documents)["mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}\n\nquery TaskHistory($pagination: PaginationInput!) {\n  taskHistory(pagination: $pagination) {\n    items {\n      id\n      state\n      procedureType\n      procedureArguments\n      results {\n        result\n        createdAt\n      }\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;