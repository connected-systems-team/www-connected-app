/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "mutation AccountRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignInComplete {\n  accountSignInComplete {\n    success\n  }\n}\n\nquery AuthenticationCurrent {\n  authenticationCurrent {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery EmailVerification {\n  emailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationSend {\n  emailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationVerify($input: EmailVerificationVerifyInput!) {\n  emailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery AccountCurrent {\n  accountCurrent {\n    currentProfile {\n      id\n      createdAt\n      updatedAt\n      username\n      displayName\n      givenName\n      familyName\n      phoneNumber\n      imageUrls {\n        url\n        variant\n      }\n    }\n    primaryAccountEmail {\n      id\n      type\n      isVerified\n      emailAddress\n      source\n      updatedAt\n      createdAt\n    }\n    roles {\n      id\n      expiresAt\n      type\n      status\n      createdByAccountId\n      updatedByAccountId\n      createdByProfileId\n      updatedByProfileId\n      updatedAt\n      createdAt\n    }\n    currentSession {\n      currentProfileId\n      status\n      statusChangedAt\n      updatedAt\n      createdAt\n    }\n    createdAt\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    id\n    username\n    givenName\n    preferredName\n    middleName\n    familyName\n    displayName\n    phoneNumber\n    imageUrls {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery ProfilePublic($username: String!) {\n  profilePublic(username: $username) {\n    username\n    displayName\n    imageUrls {\n      url\n      variant\n    }\n    createdAt\n  }\n}": types.AccountRegistrationOrSignInCreateDocument,
    "query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id)\n}": types.ContactsDocument,
    "query DataInteractionDatabases($pagination: PaginationInput) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n      rowCount\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput, $orderBy: OrderBy, $filters: ColumnFilterGroup) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    orderBy: $orderBy\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}": types.DataInteractionDatabasesDocument,
    "query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}": types.EmailCampaignsDocument,
    "mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input)\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input)\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}": types.EngagementEventCreateDocument,
    "query Posts($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  posts(input: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInputWithFilters) {\n  postsMine(input: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      imageUrls {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreateAdmin(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type)\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId)\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content)\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content)\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id)\n}": types.PostsDocument,
    "query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($paginationInputWithFilters: PaginationInputWithFilters) {\n  posts(input: $paginationInputWithFilters) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsAdmin($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  supportTicketsAdmin(pagination: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      createdAt\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketCommentCreateAdmin($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreateAdmin(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}": types.SupportPostDocument,
    "query WaitLists {\n  waitLists {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $itemsPerPage: Int! = 100) {\n  waitListEntries(\n    input: {itemsPerPage: $itemsPerPage, waitListIdentifier: $waitListIdentifier}\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}": types.WaitListsDocument,
    "mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}": types.TaskCreatePortScanDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AccountRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignInComplete {\n  accountSignInComplete {\n    success\n  }\n}\n\nquery AuthenticationCurrent {\n  authenticationCurrent {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery EmailVerification {\n  emailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationSend {\n  emailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationVerify($input: EmailVerificationVerifyInput!) {\n  emailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery AccountCurrent {\n  accountCurrent {\n    currentProfile {\n      id\n      createdAt\n      updatedAt\n      username\n      displayName\n      givenName\n      familyName\n      phoneNumber\n      imageUrls {\n        url\n        variant\n      }\n    }\n    primaryAccountEmail {\n      id\n      type\n      isVerified\n      emailAddress\n      source\n      updatedAt\n      createdAt\n    }\n    roles {\n      id\n      expiresAt\n      type\n      status\n      createdByAccountId\n      updatedByAccountId\n      createdByProfileId\n      updatedByProfileId\n      updatedAt\n      createdAt\n    }\n    currentSession {\n      currentProfileId\n      status\n      statusChangedAt\n      updatedAt\n      createdAt\n    }\n    createdAt\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    id\n    username\n    givenName\n    preferredName\n    middleName\n    familyName\n    displayName\n    phoneNumber\n    imageUrls {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery ProfilePublic($username: String!) {\n  profilePublic(username: $username) {\n    username\n    displayName\n    imageUrls {\n      url\n      variant\n    }\n    createdAt\n  }\n}"): (typeof documents)["mutation AccountRegistrationOrSignInCreate($input: AccountRegistrationOrSignInCreateInput!) {\n  accountRegistrationOrSignInCreate(input: $input) {\n    emailAddress\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountRegistrationComplete($input: AccountRegistrationCompleteInput!) {\n  accountRegistrationComplete(input: $input) {\n    success\n  }\n}\n\nmutation AccountSignInComplete {\n  accountSignInComplete {\n    success\n  }\n}\n\nquery AuthenticationCurrent {\n  authenticationCurrent {\n    status\n    scopeType\n    currentChallenge {\n      challengeType\n      status\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery EmailVerification {\n  emailVerification {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationSend {\n  emailVerificationSend {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation EmailVerificationVerify($input: EmailVerificationVerifyInput!) {\n  emailVerificationVerify(input: $input) {\n    verification {\n      status\n      emailAddress\n      lastEmailSentAt\n    }\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountPasswordVerify($input: AccountPasswordVerifyInput!) {\n  accountPasswordVerify(input: $input) {\n    success\n    authentication {\n      status\n      scopeType\n      currentChallenge {\n        challengeType\n        status\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation AccountSignOut {\n  accountSignOut {\n    success\n  }\n}\n\nquery AccountCurrent {\n  accountCurrent {\n    currentProfile {\n      id\n      createdAt\n      updatedAt\n      username\n      displayName\n      givenName\n      familyName\n      phoneNumber\n      imageUrls {\n        url\n        variant\n      }\n    }\n    primaryAccountEmail {\n      id\n      type\n      isVerified\n      emailAddress\n      source\n      updatedAt\n      createdAt\n    }\n    roles {\n      id\n      expiresAt\n      type\n      status\n      createdByAccountId\n      updatedByAccountId\n      createdByProfileId\n      updatedByProfileId\n      updatedAt\n      createdAt\n    }\n    currentSession {\n      currentProfileId\n      status\n      statusChangedAt\n      updatedAt\n      createdAt\n    }\n    createdAt\n  }\n}\n\nquery AccountProfileUsernameValidate($username: String!) {\n  accountProfileUsernameValidate(username: $username)\n}\n\nmutation AccountProfileUpdate($input: AccountProfileUpdateInput!) {\n  accountProfileUpdate(input: $input) {\n    id\n    username\n    givenName\n    preferredName\n    middleName\n    familyName\n    displayName\n    phoneNumber\n    imageUrls {\n      url\n      variant\n    }\n    updatedAt\n    createdAt\n  }\n}\n\nquery ProfilePublic($username: String!) {\n  profilePublic(username: $username) {\n    username\n    displayName\n    imageUrls {\n      url\n      variant\n    }\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id)\n}"): (typeof documents)["query Contacts($pagination: PaginationInputWithFilters!) {\n  contacts(input: $pagination) {\n    items {\n      name\n      type\n      source\n      metadata\n      note\n      fields {\n        type\n        label\n        value\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Contact($id: String!) {\n  contact(id: $id) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactCreate($input: ContactCreateInput!) {\n  contactCreate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactUpdate($input: ContactUpdateInput!) {\n  contactUpdate(input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactFieldUpdate($contactId: String!, $input: ContactFieldUpdateInput!) {\n  contactFieldUpdate(contactId: $contactId, input: $input) {\n    name\n    type\n    source\n    metadata\n    note\n    fields {\n      type\n      label\n      value\n    }\n  }\n}\n\nmutation ContactDelete($id: String!) {\n  contactDelete(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DataInteractionDatabases($pagination: PaginationInput) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n      rowCount\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput, $orderBy: OrderBy, $filters: ColumnFilterGroup) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    orderBy: $orderBy\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"): (typeof documents)["query DataInteractionDatabases($pagination: PaginationInput) {\n  dataInteractionDatabases(pagination: $pagination) {\n    items {\n      databaseName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTable($databaseName: String!, $tableName: String!) {\n  dataInteractionDatabaseTable(databaseName: $databaseName, tableName: $tableName) {\n    databaseName\n    tableName\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      type\n      tableName\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableMetrics($input: DataInteractionDatabaseTableMetricsQueryInput!) {\n  dataInteractionDatabaseTableMetrics(input: $input) {\n    timeInterval\n    data\n  }\n}\n\nquery DataInteractionDatabaseTables($databaseName: String, $pagination: PaginationInput) {\n  dataInteractionDatabaseTables(\n    databaseName: $databaseName\n    pagination: $pagination\n  ) {\n    items {\n      databaseName\n      tableName\n      rowCount\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery DataInteractionDatabaseTableRows($databaseName: String!, $tableName: String!, $pagination: PaginationInput, $orderBy: OrderBy, $filters: ColumnFilterGroup) {\n  dataInteractionDatabaseTableRows(\n    databaseName: $databaseName\n    tableName: $tableName\n    pagination: $pagination\n    orderBy: $orderBy\n    filters: $filters\n  ) {\n    items\n    databaseName\n    tableName\n    rowCount\n    columns {\n      name\n      type\n      isKey\n      isPrimaryKey\n      keyTableName\n      possibleValues\n      isNullable\n      isGenerated\n      length\n    }\n    relations {\n      fieldName\n      tableName\n      type\n      inverseFieldName\n      inverseType\n      inverseTableName\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}"): (typeof documents)["query EmailCampaigns($pagination: PaginationInputWithFilters) {\n  emailCampaigns(input: $pagination) {\n    items {\n      id\n      title\n      description\n      fromName\n      fromEmail\n      status\n      currentStageIndexId\n      deliveryStages {\n        indexId\n        percentToSend\n        stageStatus\n        emailsSent\n        percentSent\n        startedAt\n        completedAt\n        emailTemplateId\n        emailTemplateContentId\n      }\n      updatedByAccountId\n      updatedByProfileId\n      updatedAt\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery EmailLists($pagination: PaginationInput) {\n  emailLists(pagination: $pagination) {\n    items {\n      id\n      identifier\n      title\n      pagedEmailListEntries(pagination: {itemIndex: 0, itemsPerPage: 0}) {\n        pagination {\n          itemsTotal\n        }\n      }\n      updatedAt\n      updatedByAccountId\n      updatedByProfileId\n      createdByAccountId\n      createdByProfileId\n      createdAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input)\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input)\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}"): (typeof documents)["mutation EngagementEventCreate($input: CreateEngagementEventInput!) {\n  engagementEventCreate(input: $input)\n}\n\nmutation EngagementEventsCreate($input: [CreateEngagementEventInput!]!) {\n  engagementEventsCreate(inputs: $input)\n}\n\nquery EngagementOverview {\n  engagementOverview {\n    uniqueDeviceIds\n    views {\n      uniqueDeviceCount\n      viewIdentifier\n    }\n    locations {\n      uniqueDeviceCount\n      countryCode\n      latitude\n      longitude\n    }\n    deviceCategoryPercentages\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Posts($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  posts(input: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInputWithFilters) {\n  postsMine(input: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      imageUrls {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreateAdmin(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type)\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId)\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content)\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content)\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id)\n}"): (typeof documents)["query Posts($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  posts(input: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery PostsMine($pagination: PaginationInputWithFilters) {\n  postsMine(input: $pagination) {\n    items {\n      id\n      identifier\n      slug\n      status\n      title\n      createdByProfileId\n      createdByProfile {\n        displayName\n        username\n        imageUrls {\n          url\n          type\n          variant\n        }\n      }\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      reactions {\n        content\n        count\n        reacted\n      }\n      upvoteCount\n      downvoteCount\n      voteType\n      reportedCount\n      reportStatus\n      metadata\n      latestRevisionId\n      updatedAt\n      createdAt\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nquery Post($identifier: String!) {\n  post(identifier: $identifier) {\n    id\n    identifier\n    slug\n    status\n    title\n    createdByProfileId\n    createdByProfile {\n      displayName\n      username\n      imageUrls {\n        url\n        type\n        variant\n      }\n    }\n    content\n    topics {\n      id\n      title\n    }\n    reactions {\n      content\n      count\n      reacted\n    }\n    upvoteCount\n    downvoteCount\n    voteType\n    reportedCount\n    reportStatus\n    type\n    metadata\n    latestRevisionId\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostCreate($input: PostCreateInput!) {\n  postCreateAdmin(input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostUpdate($id: String!, $input: PostUpdateInput!) {\n  postUpdate(id: $id, input: $input) {\n    id\n    status\n    title\n    contentType\n    content\n    settings\n    upvoteCount\n    downvoteCount\n    metadata\n    updatedAt\n    createdAt\n  }\n}\n\nmutation PostDelete($id: String!) {\n  postDelete(id: $id)\n}\n\nmutation PostVote($postId: String!, $type: PostVoteType!) {\n  postVote(postId: $postId, type: $type)\n}\n\nmutation PostUnvote($postId: String!) {\n  postUnvote(postId: $postId)\n}\n\nmutation PostReactionCreate($postId: String!, $content: String!) {\n  postReactionCreate(postId: $postId, content: $content)\n}\n\nmutation PostReactionDelete($postId: String!, $content: String!) {\n  postReactionDelete(postId: $postId, content: $content)\n}\n\nquery PostReactionProfiles($postId: String!, $content: String!, $pagination: PaginationInput) {\n  postReactionProfiles(\n    postId: $postId\n    content: $content\n    pagination: $pagination\n  ) {\n    items {\n      username\n      displayName\n      profileId\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n  }\n}\n\nmutation PostReportCreate($input: PostReportInput!) {\n  postReportCreate(input: $input) {\n    id\n  }\n}\n\nquery PostTopicById($id: String!) {\n  postTopicById(id: $id) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nquery PostTopics($ids: [String!]) {\n  postTopics(ids: $ids) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicCreate($input: PostTopicCreateInput!) {\n  postTopicCreate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicUpdate($input: PostTopicUpdateInput!) {\n  postTopicUpdate(input: $input) {\n    id\n    title\n    slug\n    description\n    postCount\n    createdAt\n  }\n}\n\nmutation PostTopicDelete($id: String!) {\n  postTopicDelete(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($paginationInputWithFilters: PaginationInputWithFilters) {\n  posts(input: $paginationInputWithFilters) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsAdmin($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  supportTicketsAdmin(pagination: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      createdAt\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketCommentCreateAdmin($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreateAdmin(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}"): (typeof documents)["query SupportPost($identifier: String!) {\n  post(identifier: $identifier) {\n    identifier\n    slug\n    status\n    title\n    description\n    content\n    updatedAt\n    createdAt\n  }\n}\n\nquery SupportPosts($paginationInputWithFilters: PaginationInputWithFilters) {\n  posts(input: $paginationInputWithFilters) {\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      pagesTotal\n      page\n    }\n    items {\n      identifier\n      slug\n      status\n      title\n      description\n      content\n      topics {\n        id\n        title\n        slug\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nquery SupportPostTopic($slug: String!, $path: String, $pagination: PaginationInput) {\n  postTopic(\n    slug: $slug\n    path: $path\n    type: \"SupportArticle\"\n    pagination: $pagination\n  ) {\n    topic {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    subTopics {\n      id\n      title\n      slug\n      description\n      postCount\n      createdAt\n    }\n    pagedPosts {\n      items {\n        id\n        identifier\n        slug\n        status\n        title\n        description\n        content\n        metadata\n        updatedAt\n        createdAt\n      }\n      pagination {\n        itemIndex\n        itemIndexForPreviousPage\n        itemIndexForNextPage\n        itemsPerPage\n        itemsTotal\n        pagesTotal\n        page\n      }\n    }\n  }\n}\n\nmutation SupportTicketCreate($input: SupportTicketCreateInput!) {\n  supportTicketCreate(input: $input) {\n    id\n    type\n    status\n    userEmailAddress\n    title\n    description\n    comments {\n      content\n    }\n  }\n}\n\nquery SupportTicketsAdmin($pagination: PaginationInputWithFilters, $orderBy: OrderBy) {\n  supportTicketsAdmin(pagination: $pagination, orderBy: $orderBy) {\n    items {\n      id\n      identifier\n      status\n      type\n      title\n      userEmailAddress\n      createdAt\n      comments {\n        id\n        source\n        visibility\n        content\n        contentType\n        attachments {\n          type\n          url\n          variant\n        }\n        createdAt\n      }\n    }\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}\n\nmutation SupportTicketCommentCreateAdmin($input: SupportTicketCommentCreateInput!) {\n  supportTicketCommentCreateAdmin(input: $input) {\n    id\n    content\n    contentType\n    source\n    visibility\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query WaitLists {\n  waitLists {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $itemsPerPage: Int! = 100) {\n  waitListEntries(\n    input: {itemsPerPage: $itemsPerPage, waitListIdentifier: $waitListIdentifier}\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}"): (typeof documents)["query WaitLists {\n  waitLists {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      identifier\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListCreate($data: WaitListCreationInput!) {\n  waitListCreate(data: $data) {\n    id\n    identifier\n    title\n    description\n    updatedAt\n    createdAt\n  }\n}\n\nquery WaitListEntries($waitListIdentifier: String!, $itemsPerPage: Int! = 100) {\n  waitListEntries(\n    input: {itemsPerPage: $itemsPerPage, waitListIdentifier: $waitListIdentifier}\n  ) {\n    pagination {\n      itemIndex\n      itemIndexForNextPage\n      itemIndexForPreviousPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n    items {\n      id\n      emailAddress\n      message\n      userAgent\n      countryCode\n      referredBy\n      contactedAt\n      updatedAt\n      createdAt\n    }\n  }\n}\n\nmutation WaitListEntryCreate($emailAddress: String!) {\n  waitListEntryCreate(\n    emailAddress: $emailAddress\n    waitListIdentifier: \"earlyAccess\"\n  ) {\n    id\n    emailAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}"): (typeof documents)["mutation TaskCreatePortScan($input: TaskPortScanInput!) {\n  taskCreatePortScan(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery TaskPortScan($input: TaskInput!) {\n  task(input: $input) {\n    id\n    groupdId\n    regionId\n    lastResultId\n    state\n    priority\n    procedureType\n    procedureArguments\n    runAt\n    attempts\n    maxAttempts\n    assignments {\n      id\n      attempt\n      gridNode {\n        id\n        updatedAt\n        createdAt\n      }\n      region {\n        name\n      }\n      updatedAt\n      createdAt\n    }\n    meta\n    results {\n      id\n      taskId\n      regionId\n      region {\n        id\n        name\n        displayName\n        updatedAt\n        createdAt\n      }\n      clusterId\n      cluster {\n        id\n        name\n        updatedAt\n        createdAt\n      }\n      gridNodeId\n      type\n      ranAt\n      attempt\n      duration\n      result\n      meta\n      error\n      createdAt\n      updatedAt\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery GridRegions {\n  gridRegions {\n    id\n    name\n    displayName\n    updatedAt\n    createdAt\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;