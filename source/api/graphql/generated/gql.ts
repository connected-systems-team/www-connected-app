/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    'query GridRegionLevels($input: GridRegionLevelsListInput!) {\n  gridRegionLevels(input: $input) {\n    region\n    country\n    division\n    locality\n    site\n  }\n}\n\nmutation NetworkToolPortCheckCreate($input: NetworkToolPortCheckCreateInput!) {\n  networkToolPortCheckCreate(input: $input)\n}\n\nmutation NetworkToolDnsCreate($input: NetworkToolDnsCreateInput!) {\n  networkToolDnsCreate(input: $input)\n}\n\nmutation NetworkToolPingCreate($input: NetworkToolPingCreateInput!) {\n  networkToolPingCreate(input: $input)\n}\n\nmutation NetworkToolTlsCertificateCreate($input: NetworkToolTlsCertificateCreateInput!) {\n  networkToolTlsCertificateCreate(input: $input)\n}\n\nmutation NetworkToolTracerouteCreate($input: NetworkToolTracerouteCreateInput!) {\n  networkToolTracerouteCreate(input: $input)\n}\n\nmutation NetworkToolWhoisCreate($input: NetworkToolWhoisCreateInput!) {\n  networkToolWhoisCreate(input: $input)\n}\n\nquery NetworkToolHistory($input: NetworkToolHistoryInput!, $pagination: PaginationInput!) {\n  networkToolHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      status\n      stepExecutions {\n        stepId\n        status\n        actionType\n        attempt\n        input\n        output\n        updatedAt\n        elapsedTimeMs\n        startedAt\n        completedAt\n        createdAt\n        errors\n      }\n      metadata\n      flowVersionId\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}': typeof types.GridRegionLevelsDocument;
    'query FlowExecution($input: FlowExecutionInput!) {\n  flowExecution(input: $input) {\n    id\n    triggerId\n    triggerType\n    flowVersionId\n    status\n    input\n    output\n    stepExecutions {\n      id\n      stepId\n      flowExecutionId\n      status\n      attempt\n      actionType\n      input\n      output\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    elapsedTimeMs\n    errors\n    startedAt\n    completedAt\n    updatedAt\n    createdAt\n  }\n}\n\nquery FlowExecutionHistory($input: FlowExecutionHistoryInput!, $pagination: PaginationInput!) {\n  flowExecutionHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      flowVersionId\n      status\n      stepExecutions {\n        id\n        stepId\n        flowExecutionId\n        status\n        attempt\n        actionType\n        input\n        output\n        elapsedTimeMs\n        startedAt\n        completedAt\n        updatedAt\n        createdAt\n        errors\n      }\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}': typeof types.FlowExecutionDocument;
};
const documents: Documents = {
    'query GridRegionLevels($input: GridRegionLevelsListInput!) {\n  gridRegionLevels(input: $input) {\n    region\n    country\n    division\n    locality\n    site\n  }\n}\n\nmutation NetworkToolPortCheckCreate($input: NetworkToolPortCheckCreateInput!) {\n  networkToolPortCheckCreate(input: $input)\n}\n\nmutation NetworkToolDnsCreate($input: NetworkToolDnsCreateInput!) {\n  networkToolDnsCreate(input: $input)\n}\n\nmutation NetworkToolPingCreate($input: NetworkToolPingCreateInput!) {\n  networkToolPingCreate(input: $input)\n}\n\nmutation NetworkToolTlsCertificateCreate($input: NetworkToolTlsCertificateCreateInput!) {\n  networkToolTlsCertificateCreate(input: $input)\n}\n\nmutation NetworkToolTracerouteCreate($input: NetworkToolTracerouteCreateInput!) {\n  networkToolTracerouteCreate(input: $input)\n}\n\nmutation NetworkToolWhoisCreate($input: NetworkToolWhoisCreateInput!) {\n  networkToolWhoisCreate(input: $input)\n}\n\nquery NetworkToolHistory($input: NetworkToolHistoryInput!, $pagination: PaginationInput!) {\n  networkToolHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      status\n      stepExecutions {\n        stepId\n        status\n        actionType\n        attempt\n        input\n        output\n        updatedAt\n        elapsedTimeMs\n        startedAt\n        completedAt\n        createdAt\n        errors\n      }\n      metadata\n      flowVersionId\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}':
        types.GridRegionLevelsDocument,
    'query FlowExecution($input: FlowExecutionInput!) {\n  flowExecution(input: $input) {\n    id\n    triggerId\n    triggerType\n    flowVersionId\n    status\n    input\n    output\n    stepExecutions {\n      id\n      stepId\n      flowExecutionId\n      status\n      attempt\n      actionType\n      input\n      output\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    elapsedTimeMs\n    errors\n    startedAt\n    completedAt\n    updatedAt\n    createdAt\n  }\n}\n\nquery FlowExecutionHistory($input: FlowExecutionHistoryInput!, $pagination: PaginationInput!) {\n  flowExecutionHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      flowVersionId\n      status\n      stepExecutions {\n        id\n        stepId\n        flowExecutionId\n        status\n        attempt\n        actionType\n        input\n        output\n        elapsedTimeMs\n        startedAt\n        completedAt\n        updatedAt\n        createdAt\n        errors\n      }\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}':
        types.FlowExecutionDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
    source: 'query GridRegionLevels($input: GridRegionLevelsListInput!) {\n  gridRegionLevels(input: $input) {\n    region\n    country\n    division\n    locality\n    site\n  }\n}\n\nmutation NetworkToolPortCheckCreate($input: NetworkToolPortCheckCreateInput!) {\n  networkToolPortCheckCreate(input: $input)\n}\n\nmutation NetworkToolDnsCreate($input: NetworkToolDnsCreateInput!) {\n  networkToolDnsCreate(input: $input)\n}\n\nmutation NetworkToolPingCreate($input: NetworkToolPingCreateInput!) {\n  networkToolPingCreate(input: $input)\n}\n\nmutation NetworkToolTlsCertificateCreate($input: NetworkToolTlsCertificateCreateInput!) {\n  networkToolTlsCertificateCreate(input: $input)\n}\n\nmutation NetworkToolTracerouteCreate($input: NetworkToolTracerouteCreateInput!) {\n  networkToolTracerouteCreate(input: $input)\n}\n\nmutation NetworkToolWhoisCreate($input: NetworkToolWhoisCreateInput!) {\n  networkToolWhoisCreate(input: $input)\n}\n\nquery NetworkToolHistory($input: NetworkToolHistoryInput!, $pagination: PaginationInput!) {\n  networkToolHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      status\n      stepExecutions {\n        stepId\n        status\n        actionType\n        attempt\n        input\n        output\n        updatedAt\n        elapsedTimeMs\n        startedAt\n        completedAt\n        createdAt\n        errors\n      }\n      metadata\n      flowVersionId\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}',
): (typeof documents)['query GridRegionLevels($input: GridRegionLevelsListInput!) {\n  gridRegionLevels(input: $input) {\n    region\n    country\n    division\n    locality\n    site\n  }\n}\n\nmutation NetworkToolPortCheckCreate($input: NetworkToolPortCheckCreateInput!) {\n  networkToolPortCheckCreate(input: $input)\n}\n\nmutation NetworkToolDnsCreate($input: NetworkToolDnsCreateInput!) {\n  networkToolDnsCreate(input: $input)\n}\n\nmutation NetworkToolPingCreate($input: NetworkToolPingCreateInput!) {\n  networkToolPingCreate(input: $input)\n}\n\nmutation NetworkToolTlsCertificateCreate($input: NetworkToolTlsCertificateCreateInput!) {\n  networkToolTlsCertificateCreate(input: $input)\n}\n\nmutation NetworkToolTracerouteCreate($input: NetworkToolTracerouteCreateInput!) {\n  networkToolTracerouteCreate(input: $input)\n}\n\nmutation NetworkToolWhoisCreate($input: NetworkToolWhoisCreateInput!) {\n  networkToolWhoisCreate(input: $input)\n}\n\nquery NetworkToolHistory($input: NetworkToolHistoryInput!, $pagination: PaginationInput!) {\n  networkToolHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      status\n      stepExecutions {\n        stepId\n        status\n        actionType\n        attempt\n        input\n        output\n        updatedAt\n        elapsedTimeMs\n        startedAt\n        completedAt\n        createdAt\n        errors\n      }\n      metadata\n      flowVersionId\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
    source: 'query FlowExecution($input: FlowExecutionInput!) {\n  flowExecution(input: $input) {\n    id\n    triggerId\n    triggerType\n    flowVersionId\n    status\n    input\n    output\n    stepExecutions {\n      id\n      stepId\n      flowExecutionId\n      status\n      attempt\n      actionType\n      input\n      output\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    elapsedTimeMs\n    errors\n    startedAt\n    completedAt\n    updatedAt\n    createdAt\n  }\n}\n\nquery FlowExecutionHistory($input: FlowExecutionHistoryInput!, $pagination: PaginationInput!) {\n  flowExecutionHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      flowVersionId\n      status\n      stepExecutions {\n        id\n        stepId\n        flowExecutionId\n        status\n        attempt\n        actionType\n        input\n        output\n        elapsedTimeMs\n        startedAt\n        completedAt\n        updatedAt\n        createdAt\n        errors\n      }\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}',
): (typeof documents)['query FlowExecution($input: FlowExecutionInput!) {\n  flowExecution(input: $input) {\n    id\n    triggerId\n    triggerType\n    flowVersionId\n    status\n    input\n    output\n    stepExecutions {\n      id\n      stepId\n      flowExecutionId\n      status\n      attempt\n      actionType\n      input\n      output\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    elapsedTimeMs\n    errors\n    startedAt\n    completedAt\n    updatedAt\n    createdAt\n  }\n}\n\nquery FlowExecutionHistory($input: FlowExecutionHistoryInput!, $pagination: PaginationInput!) {\n  flowExecutionHistory(input: $input, pagination: $pagination) {\n    items {\n      id\n      triggerId\n      triggerType\n      flowVersionId\n      status\n      stepExecutions {\n        id\n        stepId\n        flowExecutionId\n        status\n        attempt\n        actionType\n        input\n        output\n        elapsedTimeMs\n        startedAt\n        completedAt\n        updatedAt\n        createdAt\n        errors\n      }\n      elapsedTimeMs\n      startedAt\n      completedAt\n      updatedAt\n      createdAt\n      errors\n    }\n    pagination {\n      itemIndex\n      itemIndexForPreviousPage\n      itemIndexForNextPage\n      itemsPerPage\n      itemsTotal\n      page\n      pagesTotal\n    }\n  }\n}'];

export function graphql(source: string) {
    return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<
    infer TType,
    any
>
    ? TType
    : never;
