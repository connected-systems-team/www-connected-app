schema {
    query: Query
    mutation: Mutation
}

type AddressBookEntry {
    city: String!
    company: String
    country: String!
    createdAt: DateTimeISO!
    firstName: String!
    id: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
    updatedAt: DateTimeISO!
}

"""
The tier of a saved address book entry
"""
enum AddressBookEntryTier {
    Primary
    Secondary
}

input ColumnFilter {
    caseSensitive: Boolean
    column: String!
    operator: ColumnFilterConditionOperator!
    value: JSON!
}

"""
The operator of a field filter
"""
enum ColumnFilterConditionOperator {
    Equal
    GreaterThan
    GreaterThanOrEqual
    In
    IsNotNull
    IsNull
    LessThan
    LessThanOrEqual
    Like
    NotEqual
    NotIn
    NotLike
}

type CommerceOrder {
    batchIdentifier: String!
    beneficiaryEmailAddress: String
    createdAt: DateTimeISO!
    discounts: [Discount!]
    emailAddress: String!
    fulfillmentStatus: CommerceOrderFulfillmentStatus!
    holdOnShipping: Boolean!
    id: String!
    identifier: String!
    lineItems: [CommerceOrderLineItem!]
    metadata: JSON
    orderLogs: [CommerceOrderLog!]
    payment: Payment
    paymentId: String
    paymentStatus: PaymentStatus
    priceInfo: CommerceOrderPrice!
    shipments: [Shipment!]
    shippingInfo: CommerceOrderShippingInfo!
    source: String!
    status: CommerceOrderStatus!
    statusDescription: String
    updatedAt: DateTimeISO!
}

"""
The fulfillment status of the order
"""
enum CommerceOrderFulfillmentStatus {
    Cancelled
    Fulfilled
    NotStart
    PartiallyFulfilled
    Shipped
    Unfulfilled
}

type CommerceOrderLineItem {
    commerceOrderId: String!
    createdAt: DateTimeISO!
    fulfilledQuantity: Int!
    id: String!
    indexId: Int!
    inventoryHoldId: String
    productVariantId: String!
    quantity: Int!
    shippedQuantity: Int!
    status: CommerceOrderLineItemStatus!
    statusDescription: String
    updatedAt: DateTimeISO!
}

type CommerceOrderLineItemPrice {
    amount: MonetaryDecimal!
    indexId: Int!
    originalSubtotal: MonetaryDecimal!
    subtotal: MonetaryDecimal!
    tax: MonetaryDecimal!
}

"""
The status of the order line item
"""
enum CommerceOrderLineItemStatus {
    Cancelled
    Pending
    Shipped
}

type CommerceOrderLog {
    commerceOrderId: String!
    content: JSON
    createdAt: DateTimeISO!
    description: String
    id: String!
    source: CommerceOrderLogSource!
    visibility: CommerceOrderLogVisibility!
}

"""
The source of the order log.
"""
enum CommerceOrderLogSource {
    CustomerSupport
    System
    User
}

"""
The visibility of the order log.
"""
enum CommerceOrderLogVisibility {
    Private
    Public
}

type CommerceOrderPrice {
    amount: MonetaryDecimal!
    currencyCode: String!
    lineItemPrices: [CommerceOrderLineItemPrice!]!
    originalSubtotal: MonetaryDecimal!
    shippingRate: CommerceOrderShippingRate!
    subtotal: MonetaryDecimal!
    tax: CommerceOrderTax!
}

union CommerceOrderResult = CommerceOrder | PublicCommerceOrder

type CommerceOrderShippingInfo {
    shippingAddress: StreetAddressObject!
}

type CommerceOrderShippingRate {
    amount: MonetaryDecimal!
    breakdown: [CommerceOrderShippingRateBreakdown!]!
    originalAmount: MonetaryDecimal!
}

type CommerceOrderShippingRateBreakdown {
    freeShipping: Boolean!
    items: [CommerceOrderShippingRateBreakdownItem!]!
    originalShippingRate: MonetaryDecimal!
    packageIndexId: Int!
    shippingRate: MonetaryDecimal!
}

type CommerceOrderShippingRateBreakdownItem {
    indexId: Int!
    quantity: Int!
}

"""
The status of the order
"""
enum CommerceOrderStatus {
    Archived
    Cancelled
    Complete
    FailToConfirm
    Open
    OutOfStock
    Pending
    WaitPayment
}

type CommerceOrderTax {
    shipping: MonetaryDecimal!
    total: MonetaryDecimal!
}

input CreateDiscountInput {
    code: String
    endsAt: DateTimeISO
    newRule: CreateDiscountRuleInput
    ruleId: String
    startsAt: DateTimeISO
    type: DiscountType!
}

input CreateDiscountRuleInput {
    allocation: DiscountAllocationInput!
    conditions: [DiscountRuleConditionInput!]
    displayTitle: String!
    oncePerCustomer: Boolean
    title: String!
}

input CreateOrderInput {
    beneficiaryEmailAddress: String
    emailAddress: String!
    lineItems: [OrderLineItemInput!]!
    metadata: JSON
    paymentMethod: CreateOrderPaymentMethodInput
    shippingAddress: StreetAddressInput!
}

input CreateOrderPaymentMethodInput {
    newPaymentMethod: PaymentMethodInput
    saveToWalletAs: String
    walletEntryId: String
}

input CreateProductBundleInput {
    description: String
    identifier: String!
    items: [CreateProductBundleItemInput!]!
    name: String!
    visibility: ProductBundleVisibility
}

input CreateProductBundleItemInput {
    productVariantId: String!
    quantity: Float!
}

input CreateProductInput {
    description: String
    identifier: String
    name: String!
    variants: [CreateProductVariantInput!]!
    vendorId: String!
}

input CreateProductVariantInput {
    attributes: [ProductVariantAttributeInput!]
    barcode: String
    description: String
    gtin: String
    inventoryPolicy: ProductVariantInventoryPolicy!
    inventoryQuantity: Float
    name: String!
    position: Float
    price: ProductVariantPriceInput
    productId: String
    setDefault: Boolean
    sku: String
    unitInfo: ProductVariantUnitInfoInput
}

input CreateVendorInput {
    address: StreetAddressInput!
    description: String
    identifier: String
    name: String!
}

enum CreditCardType {
    Amex
    Discover
    Mastercard
    Unknown
    Visa
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
Decimal custom scalar type
"""
scalar Decimal

type Discount {
    code: String
    conditions: [DiscountCondition!]!
    createdAt: DateTimeISO!
    endsAt: DateTimeISO
    id: String!
    rule: DiscountRule
    startsAt: DateTimeISO
    type: DiscountType!
    updatedAt: DateTimeISO!
    usageCount: Int!
}

input DiscountAllocationInput {
    buyThisGetY: Int
    buyThisGetYAmount: MonetaryDecimal
    buyXAmountGetThis: MonetaryDecimal
    buyXGetThis: Int
    maxAllocationLimit: Float!
    method: DiscountAllocationMethod!
    target: DiscountAllocationTarget!
    value: MonetaryDecimal!
    valueType: DiscountValueType!
}

enum DiscountAllocationMethod {
    BuyXGetFollowing
    BuyXGetY
    Flat
}

type DiscountAllocationObject {
    buyThisGetY: Int
    buyThisGetYAmount: MonetaryDecimal
    buyXAmountGetThis: MonetaryDecimal
    buyXGetThis: Int
    maxAllocationLimit: Float!
    method: DiscountAllocationMethod!
    target: DiscountAllocationTarget!
    value: MonetaryDecimal!
    valueType: DiscountValueType!
}

enum DiscountAllocationTarget {
    Across
    Each
    ShippingAmount
    ShippingBreakdown
}

type DiscountCondition {
    createdAt: DateTimeISO!
    discountRuleId: String
    id: String!
    quantityRequirement: DiscountConditionRequirementObject
    referenceId: String!
    subtotalRequirement: DiscountConditionRequirementObject
    target: DiscountConditionTarget!
    type: DiscountConditionType!
    updatedAt: DateTimeISO!
}

input DiscountConditionRequirementInput {
    maxValue: Int
    minValue: Int
    requiredValue: Int
}

type DiscountConditionRequirementObject {
    maxValue: Int
    minValue: Int
    requiredValue: Int
}

enum DiscountConditionTarget {
    EntireOrder
    LineItem
}

enum DiscountConditionType {
    ProductVariants
    Products
    Vendors
}

type DiscountRule {
    allocation: DiscountAllocationObject!
    conditions: [DiscountCondition!]!
    createdAt: DateTimeISO!
    displayTitle: String!
    id: String!
    oncePerCustomer: Boolean!
    title: String!
    updatedAt: DateTimeISO!
}

input DiscountRuleConditionInput {
    discountRuleId: String
    quantityRequirement: DiscountConditionRequirementInput
    """
    The id of the typed entity, e.g. product id, product variant id, etc.
    """
    referenceId: String!
    subtotalRequirement: DiscountConditionRequirementInput
    target: DiscountConditionTarget!
    type: DiscountConditionType!
}

"""
The type of the discount.
"""
enum DiscountType {
    Automatic
    Code
}

enum DiscountValueType {
    FixedAmount
    Percentage
}

input EstimateOrderPriceInput {
    lineItems: [OrderLineItemInput!]!
    shippingAddress: StreetAddressInput
}

type FulfillmentOrder {
    createdAt: DateTimeISO!
    emailAddress: String!
    holdOnShipping: Boolean!
    identifier: String!
    lineItems: [FulfillmentOrderLineItem!]!
    shipments: [Shipment!]!
    shippingAddress: StreetAddressObject!
}

type FulfillmentOrderLineItem {
    fulfilledQuantity: Int!
    orderLineItemId: String!
    productVariant: FulfillmentProductVariant!
    productVariantId: String!
    quantity: Int!
    shippedQuantity: Int!
}

type FulfillmentProductVariant {
    barcode: String
    description: String
    gtin: String
    id: String!
    name: String!
    sku: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LengthUnit {
    Centimeter
    Foot
    Inch
    Meter
}

input MakePaymentToOrderInput {
    orderId: String!
    paymentMethod: CreateOrderPaymentMethodInput!
}

type MediaObject {
    type: MediaObjectType!
    url: String!
    variant: String
}

enum MediaObjectType {
    File
    Image
    Video
}

"""
Monetary decimal custom scalar type, we stored and operate the value in cents, and this scalar will convert the value to dollar when read and convert the value to cents when write.
"""
scalar MonetaryDecimal

type Mutation {
    commerceAddressBookEntryCreate(
        address: StreetAddressInput!
        alias: String
        tier: AddressBookEntryTier
    ): AddressBookEntry!
    commerceCartUpdate(items: [ShoppingBagItemInput!]!): ShoppingBag!
    commerceDiscountCreate(input: CreateDiscountInput!): Discount!
    commerceDiscountRuleCreate(input: CreateDiscountRuleInput!): DiscountRule!
    commerceGenerateManifest(shipmentIds: [String!]!): ShipmentManifest!
    commerceMarkOrdersAsShipped(orderIdentifiers: [String!]!): [CommerceOrder!]!
    commerceMarkShipmentBatchPrinted(id: String!): ShipmentBatch!
    commerceMarkShipmentBatchReadyToProcess(id: String!): ShipmentBatch!
    commerceOrderCancel(orderId: String!): CommerceOrder!
    commerceOrderCreate(input: CreateOrderInput!, paymentRequired: Boolean): CommerceOrder!
    commerceOrderSetPayment(input: MakePaymentToOrderInput!): CommerceOrder!
    commerceProductBundleCreate(input: CreateProductBundleInput!): ProductBundle!
    commerceProductBundleDelete(id: String!): Boolean!
    commerceProductBundleUpdate(input: UpdateProductBundleInput!): ProductBundle!
    commerceProductCreate(input: CreateProductInput!): Product!
    commerceProductUpdate(input: UpdateProductInput!): Product!
    commercePurchaseLabelForOrders(input: PurchaseOrderLabelsInput!): String!
    commerceSavedItemsUpdate(items: [ShoppingBagItemInput!]!): ShoppingBag!
    commerceShoppingBagCheckout(input: ShoppingBagCheckoutInput!): [CommerceOrder!]!
    commerceShoppingBagClear(identifier: String!): ShoppingBag!
    commerceShoppingBagTransform(fromIdentifier: String!, toIdentifier: String!): TransformShoppingBagResult!
    commerceShoppingBagUpsert(input: UpsertShoppingBagInput!): ShoppingBag!
    commerceVendorCreate(input: CreateVendorInput!): Vendor!
    commerceVendorUpdate(input: UpdateVendorInput!): Vendor!
    commerceWalletEntryDelete(id: String!): Boolean!
    commerceWalletEntryUpsert(input: UpsertWalletEntryInput!): WalletEntry!
    productVariantRemoveGalleryAsset(assetId: String!, id: String!): ProductVariant!
    productVariantReorderGallery(assetIds: [String!]!, id: String!): ProductVariant!
    warehouseCreate(input: WarehouseCreateInput!): Warehouse!
    warehouseDelete(id: String!): String!
    warehouseInventoryCreate(input: WarehouseInventoryCreateInput!): WarehouseInventory!
    warehouseInventoryDelete(id: String!): String!
    warehouseInventoryUpdate(input: WarehouseInventoryUpdateInput!): WarehouseInventory!
    warehouseUpdate(input: WarehouseUpdateInput!): Warehouse!
}

input OrderLineItemInput {
    indexId: Int!
    productVariantId: String!
    quantity: Int!
}

type Pagination {
    itemIndex: Int!
    itemIndexForNextPage: Int
    itemIndexForPreviousPage: Int
    itemsPerPage: Int!
    itemsTotal: Int!
    page: Int!
    pagesTotal: Int!
}

type PaginationDiscountResult {
    items: [Discount!]!
    pagination: Pagination
}

type PaginationDiscountRuleResult {
    items: [DiscountRule!]!
    pagination: Pagination
}

type PaginationFulfillmentOrderResult {
    items: [FulfillmentOrder!]!
    pagination: Pagination
}

input PaginationInput {
    itemIndex: Int
    itemsPerPage: Int!
}

input PaginationInputWithFilters {
    filters: [ColumnFilter!]
    itemIndex: Int
    itemsPerPage: Int!
}

type PaginationOrderResult {
    items: [CommerceOrder!]!
    pagination: Pagination
}

type PaginationShipmentBatchResult {
    items: [ShipmentBatch!]!
    pagination: Pagination
}

type Payment {
    amount: MonetaryDecimal!
    authorizedAt: DateTimeISO
    cancelledAt: DateTimeISO
    capturedAt: DateTimeISO
    confirmedAt: DateTimeISO
    createdAt: DateTimeISO!
    currencyCode: String!
    externalReferenceId: String
    id: String!
    paymentMethod: PaymentMethod
    paymentProcessorType: PaymentProcessorType!
    status: PaymentStatus!
    statusDescription: String
    updatedAt: DateTimeISO!
    walletEntryId: String
}

interface PaymentMethod {
    externalResourceId: String
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

type PaymentMethodCreditCard implements PaymentMethod {
    billingAddress: StreetAddressObject!
    cardType: CreditCardType!
    expirationMonth: Int!
    expirationYear: Int!
    externalResourceId: String
    last4: String!
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

input PaymentMethodInput {
    creditCard: PaymentMethodInputCreditCard
    paymentProcessorType: PaymentProcessorType!
    type: PaymentMethodType!
}

input PaymentMethodInputCreditCard {
    billingAddress: StreetAddressInput!
    cardNumber: String!
    cardholderName: String!
    cvc: String!
    expirationMonth: Int!
    expirationYear: Int!
}

enum PaymentMethodType {
    CreditCard
}

enum PaymentProcessorType {
    Stripe
}

"""
The status of the payment
"""
enum PaymentStatus {
    Authorized
    Cancelled
    Captured
    Confirmed
    FailToAuthorize
    Pending
}

type Product {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    defaultVariantId: String
    description: String
    id: String!
    identifier: String!
    name: String!
    status: ProductStatus!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
    variants: [ProductVariant!]
    vendor: Vendor
    vendorId: String
}

type ProductBundle {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    id: String!
    identifier: String!
    items: [ProductBundleItem!]!
    name: String!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
    visibility: ProductBundleVisibility!
}

type ProductBundleItem {
    indexId: String!
    productVariant: ProductVariant
    productVariantId: String!
    quantity: Float!
}

enum ProductBundleVisibility {
    Public
    Unlisted
}

type ProductBundlesPaginationResult {
    items: [ProductBundle!]!
    pagination: Pagination
}

enum ProductStatus {
    Active
    Archived
    Draft
}

type ProductVariant {
    attributes: [ProductVariantAttributeObject!]
    barcode: String
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    galleryUrls: [ProductVariantGalleryURL!]
    gtin: String
    id: String!
    inventoryPolicy: ProductVariantInventoryPolicy!
    inventoryQuantity: Float
    name: String!
    position: Float
    price: ProductVariantPriceObject!
    sku: String
    status: ProductVariantStatus!
    unitInfo: ProductVariantUnitInfoObject
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

input ProductVariantAttributeInput {
    displayName: String!
    key: ProductVariantAttributeKey!
    metadata: JSON
    value: String!
}

enum ProductVariantAttributeKey {
    Color
    Credits
    Size
    SubscriptionPlan
}

type ProductVariantAttributeObject {
    displayName: String!
    key: ProductVariantAttributeKey!
    metadata: JSON
    value: String!
}

type ProductVariantGalleryURL {
    variants: [MediaObject!]!
}

"""
Whether customers are allowed to place an order for the product variant when it's out of stock.
"""
enum ProductVariantInventoryPolicy {
    AllowBackorder
    AllowWaitlist
    Deny
}

input ProductVariantPriceInput {
    amount: MonetaryDecimal!
    currencyCode: String!
}

type ProductVariantPriceObject {
    amount: MonetaryDecimal!
    currencyCode: String!
}

"""
The status of the product variant.
"""
enum ProductVariantStatus {
    Active
    Archived
    Draft
}

input ProductVariantUnitInfoInput {
    height: Float
    heightUnit: LengthUnit
    length: Float
    lengthUnit: LengthUnit
    weight: Float
    weightUnit: WeightUnit
    width: Float
    widthUnit: LengthUnit
}

type ProductVariantUnitInfoObject {
    height: Float
    heightUnit: LengthUnit
    length: Float
    lengthUnit: LengthUnit
    weight: Float
    weightUnit: WeightUnit
    width: Float
    widthUnit: LengthUnit
}

type ProductsPaginationResult {
    items: [Product!]!
    pagination: Pagination
}

type PublicCommerceOrder {
    batchIdentifier: String!
    createdAt: DateTimeISO!
    fulfillmentStatus: CommerceOrderFulfillmentStatus!
    identifier: String!
    lineItems: [PublicCommerceOrderLineItem!]
    paymentStatus: PaymentStatus
    source: String!
    status: CommerceOrderStatus!
}

type PublicCommerceOrderLineItem {
    fulfilledQuantity: Int!
    id: String!
    indexId: Int!
    productVariantId: String!
    quantity: Int!
    shippedQuantity: Int!
    status: CommerceOrderLineItemStatus!
}

input PurchaseOrderLabelsInput {
    identifiers: [String!]!
}

type Query {
    commerceAddressBookEntries: [AddressBookEntry!]!
    commerceCart: ShoppingBag!
    commerceDiscountRules(input: PaginationInputWithFilters): PaginationDiscountRuleResult!
    commerceDiscounts(input: PaginationInputWithFilters): PaginationDiscountResult!
    commerceOrder(emailAddress: String, identifier: String!): CommerceOrderResult!
    commerceOrderPriceEstimate(input: EstimateOrderPriceInput!): CommerceOrderPrice!
    commerceOrders(input: PaginationInputWithFilters): PaginationOrderResult!
    commerceOrdersByGroupIdentifier(emailAddress: String, identifier: String!): [CommerceOrderResult!]!
    commerceOrdersReadyToFulfill(input: PaginationInput): PaginationFulfillmentOrderResult!
    commerceOrdersReadyToShip(input: PaginationInput): PaginationFulfillmentOrderResult!
    commerceProduct(id: String, identifier: String, name: String): Product!
    commerceProductAdmin(id: String, identifier: String, name: String): Product!
    commerceProductBundle(id: String, identifier: String): ProductBundle!
    commerceProductBundles(input: PaginationInputWithFilters): ProductBundlesPaginationResult!
    commerceProducts(input: PaginationInputWithFilters): ProductsPaginationResult!
    commerceProductsAdmin(input: PaginationInputWithFilters): ProductsPaginationResult!
    commerceSavedItems: ShoppingBag!
    commerceShipmentBatches(input: QueryShipmentBatchInput!): PaginationShipmentBatchResult!
    commerceShoppingBag(createIfNotExists: Boolean, identifier: String!): ShoppingBag!
    commerceShoppingBagPriceEstimate(itemIds: [String!]!): [CommerceOrderPrice!]!
    commerceStreetAddressValidate(address: StreetAddressInput!): ValidateAddressResult!
    commerceTaxRate(postalCode: String!, syncRemote: Boolean): TaxRate!
    commerceTaxRates(pagination: PaginationInput): TaxRatesResult!
    commerceVendor(id: String, identifier: String): Vendor!
    commerceVendors(input: PaginationInputWithFilters): VendorsResult!
    commerceWalletEntries: [WalletEntry!]!
    warehouse: Warehouse!
    warehouses: [Warehouse!]!
}

input QueryShipmentBatchInput {
    endAt: DateTimeISO
    itemIndex: Int
    itemsPerPage: Int!
    startAt: DateTimeISO
    status: String
}

type Shipment {
    cancelledAt: DateTimeISO
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    deliveredAt: DateTimeISO
    id: String!
    label: ShippingLabel
    orderIndexId: Int!
    orderSlip: ShippingOrderSlip
    shippedAt: DateTimeISO
    status: ShipmentStatus!
    statusDescription: String
    toAddress: StreetAddressObject!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

type ShipmentBatch {
    batchKey: String!
    closedAt: DateTimeISO
    createdAt: DateTimeISO!
    id: String!
    printedAt: DateTimeISO
    processedAt: DateTimeISO
    shipmentCount: Float!
    status: String!
    statusDescription: String
    updatedAt: DateTimeISO!
}

type ShipmentManifest {
    createdAt: DateTimeISO!
    id: String!
}

"""
The status of the shipping
"""
enum ShipmentStatus {
    Cancelled
    Delivered
    LabelPrinted
    LabelPurchased
    Pending
    Shipped
}

type ShippingLabel {
    carrier: String!
    labelId: String!
    serviceType: ShippingServiceType!
    source: ShippingLabelSource!
    trackingNumber: String!
}

enum ShippingLabelSource {
    Stamps
}

type ShippingOrderSlip {
    storedObjectUrl: String
}

enum ShippingServiceType {
    USPSFirstClassMail
    USPSMediaMail
    USPSParcelSelect
    USPSPriorityMail
    USPSPriorityMailExpress
}

type ShoppingBag {
    createdAt: DateTimeISO!
    description: String
    id: String!
    identifier: String!
    items: [ShoppingBagItem!]!
    profileId: String!
    title: String
    updatedAt: DateTimeISO!
}

input ShoppingBagCheckoutInput {
    emailAddress: String!
    itemIds: [String!]!
    paymentMethod: CreateOrderPaymentMethodInput!
}

"""
The action to perform on the shopping bag item
"""
enum ShoppingBagEditionAction {
    AddItem
    DecreaseQuantity
    IncreaseQuantity
    RemoveItem
    SetQuantity
    UpdateItem
}

type ShoppingBagItem {
    bagItemGroupKey: String!
    emailAddress: String
    firstName: String
    id: String!
    lastName: String
    productBundle: ProductBundle
    productBundleId: String
    productVariant: ProductVariant
    productVariantId: String
    quantity: Float!
    relationship: String
    shippingAddress: StreetAddressObject
}

input ShoppingBagItemInput {
    action: ShoppingBagEditionAction!
    bagItemGroupKey: String
    emailAddress: String
    firstName: String
    id: String!
    lastName: String
    productBundleId: String
    productVariantId: String
    quantity: Float
    relationship: String
    shippingAddress: StreetAddressInput
}

input StreetAddressInput {
    city: String!
    company: String
    country: String!
    firstName: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
}

type StreetAddressObject {
    city: String!
    company: String
    country: String!
    firstName: String!
    lastName: String!
    line1: String!
    line2: String
    phoneNumber: String
    postalCode: String!
    state: String!
}

type TaxRate {
    createdAt: DateTimeISO!
    id: String!
    lastSyncedAt: DateTimeISO!
    postalCode: String!
    rate: Decimal!
    rateDetail: JSON!
    updatedAt: DateTimeISO!
}

type TaxRatesResult {
    items: [TaxRate!]!
    pagination: Pagination
}

type TransformShoppingBagResult {
    from: ShoppingBag!
    to: ShoppingBag!
}

input UpdateProductBundleInput {
    addItems: [CreateProductBundleItemInput!]
    description: String
    id: String!
    identifier: String
    name: String
    removeItems: [String!]
    updateItems: [UpdateProductBundleItemInput!]
    visibility: ProductBundleVisibility
}

input UpdateProductBundleItemInput {
    indexId: String!
    quantity: Float!
}

input UpdateProductInput {
    description: String
    id: String
    identifier: String
    name: String
    newVariants: [CreateProductVariantInput!]
    removedVariantIds: [String!]
    status: ProductStatus
    updatedVariants: [UpdateProductVariantInput!]
}

input UpdateProductVariantInput {
    attributes: [ProductVariantAttributeInput!]
    barcode: String
    description: String
    gtin: String
    id: String!
    inventoryPolicy: ProductVariantInventoryPolicy
    name: String
    position: Float
    price: ProductVariantPriceInput
    setDefault: Boolean
    sku: String
    status: ProductVariantStatus
    unitInfo: ProductVariantUnitInfoInput
}

input UpdateVendorInput {
    description: String
    id: String!
    identifier: String
    name: String
    status: VendorStatus
}

input UpsertShoppingBagInput {
    description: String
    identifier: String!
    """
    The item array could be empty
    """
    items: [ShoppingBagItemInput!]!
    title: String
}

input UpsertWalletEntryInput {
    id: String
    identifier: String
    paymentMethod: PaymentMethodInput
    tier: WalletEntryTier
}

type ValidateAddressResult {
    candidateAddresses: [StreetAddressObject!]
    isApoFpo: Boolean
    isPoBox: Boolean
    isValid: Boolean!
    message: String
    originalAddress: StreetAddressObject!
}

type Vendor {
    address: AddressBookEntry
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    description: String
    id: String!
    identifier: String!
    name: String!
    pagedProducts: ProductsPaginationResult
    products(input: PaginationInput): ProductsPaginationResult!
    status: VendorStatus!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

enum VendorStatus {
    Active
    Archived
    Inactive
}

type VendorsResult {
    items: [Vendor!]!
    pagination: Pagination
}

type WalletEntry {
    createdAt: DateTimeISO!
    id: String!
    identifier: String!
    paymentMethod: PaymentMethod!
    status: WalletEntryStatus!
    statusDescription: String
    tier: WalletEntryTier!
    updatedAt: DateTimeISO!
}

enum WalletEntryStatus {
    Confirmed
    Pending
    RequiresUserAction
}

enum WalletEntryTier {
    Primary
    Secondary
}

type Warehouse {
    address: StreetAddressObject!
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    id: String!
    name: String!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

input WarehouseCreateInput {
    address: StreetAddressInput!
    name: String!
}

type WarehouseInventory {
    createdAt: DateTimeISO!
    id: String!
    lowInventoryThreshold: Int
    quantity: Int!
    updatedAt: DateTimeISO!
}

input WarehouseInventoryCreateInput {
    lowInventoryThreshold: Int
    productVariantId: String!
    quantity: Int!
    warehouseId: String!
}

input WarehouseInventoryUpdateInput {
    id: String!
    lowInventoryThreshold: Int
    quantity: Int
    quantityUpdateType: WarehouseInventoryUpdateType
}

enum WarehouseInventoryUpdateType {
    Add
    Set
    Subtract
}

input WarehouseUpdateInput {
    address: StreetAddressInput
    id: String!
    name: String
}

enum WeightUnit {
    Gram
    Kilogram
    Ounces
    Pounds
}
