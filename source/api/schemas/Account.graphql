schema {
    query: Query
    mutation: Mutation
}

type AccessRole {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    emailAddress: String
    expiresAt: DateTimeISO
    id: String!
    profile: Profile!
    status: AccessRoleStatus!
    type: String!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

"""
The status of an access role for an account/profile
"""
enum AccessRoleStatus {
    Active
    Expired
    Revoked
}

type Account {
    accessRoles: [String!]!
    createdAt: DateTimeISO!
    defaultProfile: Profile!
    defaultProfileId: String!
    emailAddress: String!
    emails: [AccountEmail!]!
    enrolledChallenges: [String!]!
    profile: Profile!
    profiles: [Profile!]!
    status: AccountStatus!
    updatedAt: DateTimeISO!
}

input AccountAccessRoleGrantInput {
    emailAddress: String!
    expiresAt: DateTimeISO
    type: String!
    username: String!
}

input AccountAccessRoleRevokeInput {
    accessRoleId: String!
}

input AccountAccessRoleUpdateInput {
    expiresAt: DateTimeISO
    roleId: String!
}

input AccountDeleteInput {
    emailAddress: String!
    reason: String
}

type AccountEmail {
    createdAt: DateTimeISO!
    emailAddress: String!
    id: String!
    isVerified: Boolean!
    source: String!
    type: AccountEmailType!
    updatedAt: DateTimeISO!
}

type AccountEmailAddressesResult {
    count: Float!
    emailAddresses: [AccountEmail!]!
}

"""
The type of an account email
"""
enum AccountEmailType {
    Primary
    Secondary
}

input AccountEmailVerificationCompleteInput {
    code: String!
    makePrimary: Boolean
}

input AccountEmailVerificationSendInput {
    emailAddress: String!
}

input AccountEmailVerificationVerifyInput {
    code: String!
}

input AccountEncryptionConfiguration {
    publicKey: String!
    transitKeyId: String!
}

input AccountInput {
    emailAddress: String!
}

input AccountPasswordUpdateInput {
    newPassword: String!
}

input AccountPasswordVerifyInput {
    password: String!
}

input AccountProfileUpdateInput {
    birthday: DateTimeISO
    displayName: String
    familyName: String
    gender: String
    givenName: String
    middleName: String
    phoneNumber: String
    preferredName: String
    username: String
}

input AccountRegistrationCompleteInput {
    displayName: String
    encryptionConfiguration: AccountEncryptionConfiguration
    familyName: String
    givenName: String
    password: String
    phoneNumber: String
    username: String
}

input AccountRegistrationOrSignInCreateInput {
    emailAddress: String!
}

type AccountSession {
    createdAt: DateTimeISO!
    id: String!
    lastUsed: DateTimeISO
    profile: Profile!
    profileId: String!
    status: AccountSessionStatus!
    statusChangedAt: DateTimeISO
    updatedAt: DateTimeISO!
}

input AccountSessionDeleteInput {
    sessionIds: [String!]!
}

"""
The status of an account session
"""
enum AccountSessionStatus {
    Active
    Expired
    Revoked
}

"""
The status of an account
"""
enum AccountStatus {
    Active
    Archived
    Locked
}

type AuthenticationChallenge {
    challengeType: String!
    status: AuthenticationChallengeStatus!
}

"""
The status of an authentication challenge.
"""
enum AuthenticationChallengeStatus {
    Failed
    Open
    Success
}

type AuthenticationEmailVerification {
    authentication: AuthenticationSession!
    verification: EmailVerification!
}

type AuthenticationOperationResult {
    authentication: AuthenticationSession!
    success: Boolean!
}

type AuthenticationRegistrationOrSignIn {
    authentication: AuthenticationSession!
    emailAddress: String!
}

type AuthenticationSession {
    createdAt: DateTimeISO!
    currentChallenge: AuthenticationChallenge
    scopeType: String!
    status: AuthenticationSessionStatus!
    updatedAt: DateTimeISO!
}

"""
The status of the authentication session.
"""
enum AuthenticationSessionStatus {
    Authenticated
    AuthenticationExpired
    AuthenticationUsed
    ChallengeExpired
    ChallengeFailed
    Challenged
    canTransition
    isChallengeFailure
    isOpen
    openStatuses
}

input ColumnFilter {
    caseSensitive: Boolean
    column: String!
    operator: ColumnFilterConditionOperator!
    value: JSON!
}

"""
The operator of a field filter
"""
enum ColumnFilterConditionOperator {
    Equal
    GreaterThan
    GreaterThanOrEqual
    In
    IsNotNull
    IsNull
    LessThan
    LessThanOrEqual
    Like
    NotEqual
    NotIn
    NotLike
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type EmailVerification {
    emailAddress: String!
    lastEmailSentAt: DateTimeISO
    status: EmailVerificationStatus!
}

"""
The verification status of an email address.
"""
enum EmailVerificationStatus {
    Failed
    Pending
    Verified
}

type ImageObject {
    type: MediaObjectType!
    url: String!
    variant: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum MediaObjectType {
    File
    Image
    Video
}

type Mutation {
    accountAccessRoleGrantPrivileged(input: AccountAccessRoleGrantInput!): AccessRole!
    accountAccessRoleRevokePrivileged(input: AccountAccessRoleRevokeInput!): OperationResult!
    accountAccessRoleUpdatePrivileged(input: AccountAccessRoleUpdateInput!): OperationResult!
    accountAdministratorSessionCreate: AuthenticationSession!
    accountAuthenticationEmailVerificationSend: AuthenticationEmailVerification!
    accountAuthenticationEmailVerificationVerify(
        input: AccountEmailVerificationVerifyInput!
    ): AuthenticationEmailVerification!
    accountAuthenticationPasswordVerify(input: AccountPasswordVerifyInput!): AuthenticationOperationResult!
    accountAuthenticationRegistrationOrSignInCreate(
        input: AccountRegistrationOrSignInCreateInput!
    ): AuthenticationRegistrationOrSignIn!
    accountDelete(reason: String): OperationResult!
    accountDeletePrivileged(input: AccountDeleteInput!): OperationResult!
    accountEmailDelete(accountEmailId: String!): OperationResult!
    accountEmailMakePrimary(accountEmailId: String!): AccountEmail!
    accountEmailVerificationComplete(input: AccountEmailVerificationCompleteInput!): AccountEmail!
    accountEmailVerificationSend(input: AccountEmailVerificationSendInput!): EmailVerification!
    accountMaintenanceSessionCreate: AuthenticationSession!
    accountPasswordUpdate(input: AccountPasswordUpdateInput!): OperationResult!
    accountProfileImageRemove: Profile!
    accountProfileUpdate(input: AccountProfileUpdateInput!): Profile!
    accountRegistrationComplete(input: AccountRegistrationCompleteInput!): AuthenticationOperationResult!
    accountSessionDelete(input: AccountSessionDeleteInput!): OperationResult!
    accountSignInComplete: AuthenticationOperationResult!
    accountSignOut: OperationResult!
}

type OperationResult {
    success: Boolean!
}

input OrderBy {
    direction: OrderByDirection
    key: String!
}

"""
The order direction of a query
"""
enum OrderByDirection {
    Ascending
    Descending
}

type PagedAccessRoles {
    items: [AccessRole!]!
    pagination: Pagination
}

type PagedAccounts {
    items: [Account!]!
    pagination: Pagination
}

type Pagination {
    itemIndex: Int!
    itemIndexForNextPage: Int
    itemIndexForPreviousPage: Int
    itemsPerPage: Int!
    itemsTotal: Int!
    page: Int!
    pagesTotal: Int!
}

input PaginationInputWithFilters {
    filters: [ColumnFilter!]
    itemIndex: Int
    itemsPerPage: Int!
}

type Profile {
    birthday: DateTimeISO
    countryCode: String
    createdAt: DateTimeISO!
    displayName: String
    familyName: String
    gender: String
    givenName: String
    id: String!
    """
    Profile asset URL
    """
    images: [ImageObject!]
    middleName: String
    preferredName: String
    updatedAt: DateTimeISO!
    username: String!
}

type PublicProfile {
    createdAt: DateTimeISO
    displayName: String
    images: [ImageObject!]
    username: String!
}

type Query {
    account: Account!
    accountAssignedAccessRolesPrivileged(
        input: PaginationInputWithFilters
        orderBy: OrderBy
        statuses: [AccessRoleStatus!]
    ): PagedAccessRoles!
    accountAuthentication: AuthenticationSession
    accountAuthenticationEmailVerification: AuthenticationEmailVerification
    accountAvailableAccessRolesPrivileged: [String!]!
    accountEmailAddresses: AccountEmailAddressesResult!
    accountEmailVerification: EmailVerification!
    accountPrivileged(input: AccountInput!): Account
    accountProfilePublic(username: String!): PublicProfile
    accountProfileUsernameValidate(username: String!): UniqueFieldValidationResult!
    accountSessions: [AccountSession!]!
    accountsPrivileged(input: PaginationInputWithFilters, orderBy: OrderBy): PagedAccounts!
}

enum UniqueFieldValidationResult {
    Available
    Forbidden
    Invalid
    Taken
}
