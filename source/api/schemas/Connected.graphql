schema {
    query: Query
    mutation: Mutation
}

"""
The type of procedure.
"""
enum AtlasProcedureType {
    NorpCheck
    PortScan
}

type Cluster {
    createdAt: DateTimeISO!
    displayName: String
    enabled: Boolean!
    id: String!
    name: String!
    updatedAt: DateTimeISO!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input GridClusterUpdateInput {
    clusterId: String
    clusterName: String
    displayName: String
    enabled: Boolean
}

type GridNode {
    createdAt: DateTimeISO!
    id: String!
    name: String!
    region: Region!
    regionId: String!
    updatedAt: DateTimeISO!
}

input GridNodeCreateInput {
    clusterName: String!
    displayName: String
    enabled: Boolean
    ipAddress: String!
    meta: JSON
    name: String!
    regionName: String!
}

input GridNodeInput {
    id: String
    name: String
}

input GridNodeUpdateInput {
    cluster: String
    displayName: String
    enabled: Boolean
    id: String
    ipAddress: String
    meta: JSON
    name: String
}

input GridRegionCreateInput {
    displayName: String!
    enabled: Boolean
    regionName: String!
}

input GridRegionUpdateInput {
    displayName: String
    enabled: Boolean
    regionId: String
    regionName: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
    """
    Update a cluster.
    """
    gridClusterUpdate(input: GridClusterUpdateInput!): Cluster
    """
    Create a new node.
    """
    gridNodeCreate(input: GridNodeCreateInput!): GridNode!
    """
    Update a node.
    """
    gridNodeUpdate(input: GridNodeUpdateInput!): GridNode!
    """
    Create a new region.
    """
    gridRegionCreate(input: GridRegionCreateInput!): Region!
    """
    Update a region.
    """
    gridRegionUpdate(input: GridRegionUpdateInput!): Region
    taskCreatePortScan(input: TaskPortScanInput!): [Task!]!
}

type Query {
    """
    Get a node.
    """
    gridNode(input: GridNodeInput!): GridNode
    """
    Generate a new key for a node.
    """
    gridNodeGenerateKey(input: GridNodeInput!): String!
    """
    Get all active regions.
    """
    gridRegions: [Region!]!
    task(input: TaskInput!): Task
    taskGroup(input: TaskGroupInput!): [Task!]!
}

type Region {
    createdAt: DateTimeISO!
    displayName: String!
    id: String!
    name: String!
    updatedAt: DateTimeISO!
}

type Task {
    assignments: [TaskAssignment!]!
    attempts: Float!
    createdAt: DateTimeISO!
    createdByAccountId: String
    createdByProfileId: String
    groupdId: String
    id: String!
    lastResultId: String
    maxAttempts: Float!
    meta: JSON
    origin: TaskOrigin!
    priority: Float!
    procedureArguments: JSON!
    procedureType: AtlasProcedureType!
    regionId: String!
    results: [TaskResult!]!
    runAt: DateTimeISO
    state: TaskState!
    updatedAt: DateTimeISO!
}

type TaskAssignment {
    active: Boolean!
    attempt: Float!
    createdAt: DateTimeISO!
    gridNode: GridNode!
    id: String!
    region: Region!
    regionId: String!
    updatedAt: DateTimeISO!
}

input TaskGroupInput {
    groupdId: String!
}

input TaskInput {
    taskId: String!
}

"""
Where the task originated from.
"""
enum TaskOrigin {
    System
    User
}

input TaskPortScanInput {
    host: String!
    ports: [String!]!
    regions: [String!]
}

type TaskResult {
    attempt: Float!
    cluster: Cluster
    clusterId: String
    createdAt: DateTimeISO!
    duration: Float!
    error: JSON
    gridNodeId: String
    id: String!
    meta: JSON
    ranAt: DateTimeISO
    region: Region
    regionId: String
    result: JSON
    taskId: String!
    type: TaskResultType!
    updatedAt: DateTimeISO!
}

"""
Task result type.
"""
enum TaskResultType {
    Error
    Failure
    Success
}

"""
The possible states of a task.
"""
enum TaskState {
    Assigned
    Cancelled
    CheckedOut
    Failed
    Pending
    Retry
    Running
    Succeeded
}
