schema {
    query: Query
    mutation: Mutation
}

"""
The operator of a field filter
"""
enum ColumnFilterConditionOperator {
    Equal
    GreaterThan
    GreaterThanOrEqual
    In
    IsNotNull
    IsNull
    LessThan
    LessThanOrEqual
    Like
    NotEqual
    NotIn
    NotLike
}

input ColumnFilterInput {
    caseSensitive: Boolean
    column: String!
    operator: ColumnFilterConditionOperator!
    value: JSON!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type FlowExecution {
    completedAt: DateTimeISO
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    elapsedTimeMs: Float
    errors: [JSON!]
    flowVersionId: String
    id: String!
    startedAt: DateTimeISO!
    status: FlowExecutionStatus!
    stepExecutions: [FlowStepExecution!]!
    triggerId: String
    triggerType: FlowTriggerType!
    updatedAt: DateTimeISO!
}

enum FlowExecutionStatus {
    Canceled
    Failed
    NotStarted
    Running
    Success
}

type FlowStepExecution {
    actionType: String!
    attempt: Float!
    completedAt: DateTimeISO
    createdAt: DateTimeISO!
    elapsedTimeMs: Float
    errors: JSON
    flowExecution: FlowExecution!
    flowExecutionId: String!
    id: String!
    input: JSON
    output: JSON
    startedAt: DateTimeISO
    status: FlowStepExecutionStatus!
    stepId: String!
    updatedAt: DateTimeISO!
}

enum FlowStepExecutionStatus {
    Failed
    NotStarted
    Running
    Success
}

enum FlowTriggerType {
    Manual
    Scheduled
    Webhook
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
    flowCancel(objectId: String!): OperationResult!
    flowPurge(objectId: String!): OperationResult!
    portMonitorCreate(input: PortMonitorCreateInput!): PortMonitor!
    portMonitorDelete(input: PortMonitorDeleteInput!): OperationResult!
    portScanCreate(input: PortScanCreateInput!): String!
}

type OperationResult {
    success: Boolean!
}

"""
The order direction of a query
"""
enum OrderByDirection {
    Ascending
    Descending
}

input OrderByInput {
    direction: OrderByDirection
    key: String!
}

type Pagination {
    itemIndex: Int!
    itemIndexForNextPage: Int
    itemIndexForPreviousPage: Int
    itemsPerPage: Int!
    itemsTotal: Int!
    page: Int!
    pagesTotal: Int!
}

input PaginationInput {
    filters: [ColumnFilterInput!]
    itemIndex: Int
    itemsPerPage: Int!
    orderBy: [OrderByInput!]
}

type PaginationPortMonitor {
    items: [PortMonitor!]!
    pagination: Pagination!
}

type PaginationPortScanResult {
    items: [FlowExecution!]!
    pagination: Pagination!
}

type PortMonitor {
    createdAt: DateTimeISO!
    createdByAccountId: String!
    createdByProfileId: String!
    durableObjectId: String
    emailDeliveryPreference: [PortScanFlowNodeResultStatus!]!
    flowId: String!
    host: String!
    hour: Float!
    id: String!
    minute: Float!
    ports: [PortMonitorStateCheck!]!
    region: String!
    state: PortMonitorState!
    updatedAt: DateTimeISO!
    updatedByAccountId: String
    updatedByProfileId: String
}

input PortMonitorCreateInput {
    emailDeliveryPreference: [PortScanFlowNodeResultStatus!]!
    host: String!
    hour: Float!
    minute: Float!
    ports: [PortMonitorStateCheckInput!]!
    region: String!
}

input PortMonitorDeleteInput {
    monitorId: String!
}

enum PortMonitorState {
    Active
    Deleted
    Inactive
}

type PortMonitorStateCheck {
    port: String!
    state: PortStateValue!
}

input PortMonitorStateCheckInput {
    port: String!
    state: PortStateValue!
}

input PortScanCreateInput {
    host: String!
    ports: [String!]!
    region: String!
}

enum PortScanFlowNodeResultStatus {
    Failure
    Mismatch
    Success
}

input PortScanInput {
    executionId: String!
}

enum PortStateValue {
    Closed
    ClosedFiltered
    Filtered
    Open
    OpenFiltered
    Unfiltered
}

type Query {
    portMonitor(pagination: PaginationInput!): PaginationPortMonitor!
    portScan(input: PortScanInput!): FlowExecution
    portScanHistory(pagination: PaginationInput!): PaginationPortScanResult!
}
